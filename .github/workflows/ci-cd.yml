name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/notes-app

jobs:
  # Job 1: Unit Tests
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run unit tests
        run: |
          pytest tests/ -v --tb=short

  # Job 2: SAST (Static Application Security Testing)
  sast:
    name: SAST (Bandit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit SAST scan
        run: |
          bandit -r app/ -f json -o bandit-report.json
          bandit -r app/ -f txt

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 3: SCA (Software Composition Analysis)
  sca:
    name: SCA (pip-audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Run pip-audit for production dependencies
        run: |
          pip-audit -r requirements.txt --format=json --output=pip-audit-prod.json
          pip-audit -r requirements.txt

      - name: Run pip-audit for dev dependencies
        run: |
          pip-audit -r dev-requirements.txt --format=json --output=pip-audit-dev.json
          pip-audit -r dev-requirements.txt

      - name: Upload pip-audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-reports
          path: |
            pip-audit-prod.json
            pip-audit-dev.json

  # Job 4: Secret Scan
  secret-scan:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: Build and Push Docker Image
  build_and_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-test, sast, sca, secret-scan]  # Only run if all security jobs pass
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Job 6: Image Scan (Trivy)
  image-scan:
    name: Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (JSON report)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'json'
          output: 'trivy-results.json'

      - name: Upload Trivy JSON report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: trivy-results.json

      - name: Check Trivy scan results
        run: |
          # Check if there are HIGH or CRITICAL vulnerabilities
          HIGH_CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy-results.json)
          echo "Found $HIGH_CRITICAL HIGH/CRITICAL vulnerabilities"
          
          if [ "$HIGH_CRITICAL" -gt 0 ]; then
            echo "❌ Found HIGH or CRITICAL vulnerabilities in the image!"
            jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "- \(.VulnerabilityID): \(.Title) (Severity: \(.Severity))"' trivy-results.json
            exit 1
          else
            echo "✅ No HIGH or CRITICAL vulnerabilities found in the image"
          fi

  # Summary Job
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [unit-test, sast, sca, secret-scan, build_and_push, image-scan]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## 🔒 Security Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST (Bandit) | ${{ needs.sast.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SCA (pip-audit) | ${{ needs.sca.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan (Gitleaks) | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Push | ${{ needs.build_and_push.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Scan (Trivy) | ${{ needs.image-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:** ${{ needs.build_and_push.outputs.image-tags }}" >> $GITHUB_STEP_SUMMARY
